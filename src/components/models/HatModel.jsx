/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
"use client";
import { useGLTF } from "@react-three/drei";
import { extend, useFrame } from "@react-three/fiber";
import React, { useEffect, useRef } from "react";
import * as THREE from "three";

// Extend the THREE namespace to include any necessary objects
extend(THREE);

const HatModel = React.memo(function HatModel(props) {
  const { nodes, materials } = useGLTF("/models/hat-transformed.glb");
  const modelRef = useRef();

  // Check if nodes and materials are loading correctly
  useEffect(() => {
    if (!nodes || !materials) {
      console.error("GLTF model not loaded properly:", nodes, materials);
    }
  }, [nodes, materials]);

  // Handle WebGL context lost/recovery
  const onContextLost = (event) => {
    event.preventDefault();
    console.error("WebGL context lost");
  };

  const onContextRestored = () => {
    console.log("WebGL context restored");
  };

  useEffect(() => {
    const canvas = modelRef.current;
    canvas?.addEventListener("webglcontextlost", onContextLost);
    canvas?.addEventListener("webglcontextrestored", onContextRestored);

    return () => {
      canvas?.removeEventListener("webglcontextlost", onContextLost);
      canvas?.removeEventListener("webglcontextrestored", onContextRestored);
    };
  }, []);

  // Rotate the model on every frame
  useFrame(() => {
    if (modelRef.current) {
      modelRef.current.rotation.y += 0.007;
    }
  });

  return (
    <group
      {...props}
      dispose={null}
      ref={modelRef}
      scale={[1.8, 1.8, 1.8]}
      rotation={[0.4, -1, 0]}
      position={[0, 0, 0]}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={nodes?.Object_2?.geometry}
        material={materials?.initialShadingGroup}
        position={[0, -3.867, 0]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
    </group>
  );
});

// Preload the model for better performance
useGLTF.preload("/models/hat-transformed.glb");

export default HatModel;
